diff -crB drop-vanilla/dropbear-0.52/common-session.c dropbear-0.52/common-session.c
*** drop-vanilla/dropbear-0.52/common-session.c	Tue Nov 11 14:09:02 2008
--- dropbear-0.52/common-session.c	Sat May  9 23:44:32 2009
***************
*** 443,450 ****
  		m_free(ses.authstate.pw_shell);
  	if (ses.authstate.pw_passwd)
  		m_free(ses.authstate.pw_passwd);
! 
! 	pw = getpwnam(username);
  	if (!pw) {
  		return;
  	}
--- 443,450 ----
  		m_free(ses.authstate.pw_shell);
  	if (ses.authstate.pw_passwd)
  		m_free(ses.authstate.pw_passwd);
!    
!    pw = getpwnam(username);
  	if (!pw) {
  		return;
  	}
diff -crB drop-vanilla/dropbear-0.52/loginrec.c dropbear-0.52/loginrec.c
*** drop-vanilla/dropbear-0.52/loginrec.c	Tue Nov 11 14:09:03 2008
--- dropbear-0.52/loginrec.c	Sun May 10 00:23:56 2009
***************
*** 157,162 ****
--- 157,163 ----
  #include "loginrec.h"
  #include "dbutil.h"
  #include "atomicio.h"
+ #include "session.h"
  
  /**
   ** prototypes for helper functions in this file
***************
*** 275,285 ****
  
  	if (username) {
  		strlcpy(li->username, username, sizeof(li->username));
! 		pw = getpwnam(li->username);
! 		if (pw == NULL)
! 			dropbear_exit("login_init_entry: Cannot find user \"%s\"",
! 					li->username);
! 		li->uid = pw->pw_uid;
  	}
  
  	if (hostname)
--- 276,288 ----
  
  	if (username) {
  		strlcpy(li->username, username, sizeof(li->username));
!       pw = getpwnam(li->username);
!       if (pw == NULL)
!          li->uid = ses.authstate.pw_uid;   
!             //dropbear_exit("login_init_entry: Cannot find user \"%s\"",
!             //      li->username);
!       else
!          li->uid = pw->pw_uid;
  	}
  
  	if (hostname)
diff -crB drop-vanilla/dropbear-0.52/runopts.h dropbear-0.52/runopts.h
*** drop-vanilla/dropbear-0.52/runopts.h	Tue Nov 11 14:09:03 2008
--- dropbear-0.52/runopts.h	Sat May  9 23:57:04 2009
***************
*** 25,30 ****
--- 25,31 ----
  #ifndef _RUNOPTS_H_
  #define _RUNOPTS_H_
  
+ #include <pwd.h>
  #include "includes.h"
  #include "signkey.h"
  #include "buffer.h"
***************
*** 88,93 ****
--- 89,101 ----
  	sign_key *hostkey;
  	buffer * banner;
  	char * pidfile;
+    
+    int android_mode;
+    char *user_name;
+    char *passwd;
+    char *authkey;
+    uid_t uid;
+    gid_t gid;
  
  } svr_runopts;
  
*** drop-vanilla/dropbear-0.52/svr-auth.c	Tue Nov 11 14:09:03 2008
--- dropbear-0.52/svr-auth.c	Sun May 10 12:44:30 2009
***************
*** 164,170 ****
  		if (methodlen == AUTH_METHOD_PASSWORD_LEN &&
  				strncmp(methodname, AUTH_METHOD_PASSWORD,
  					AUTH_METHOD_PASSWORD_LEN) == 0) {
! 			svr_auth_password();
  			goto out;
  		}
  	}
--- 164,173 ----
  		if (methodlen == AUTH_METHOD_PASSWORD_LEN &&
  				strncmp(methodname, AUTH_METHOD_PASSWORD,
  					AUTH_METHOD_PASSWORD_LEN) == 0) {
! 			if (svr_opts.android_mode)
!             svr_auth_android();
!          else
!             svr_auth_password();
  			goto out;
  		}
  	}
***************
*** 215,221 ****
  	if (userlen > MAX_USERNAME_LEN) {
  		return DROPBEAR_FAILURE;
  	}
! 
  	/* new user or username has changed */
  	if (ses.authstate.username == NULL ||
  		strcmp(username, ses.authstate.username) != 0) {
--- 218,224 ----
  	if (userlen > MAX_USERNAME_LEN) {
  		return DROPBEAR_FAILURE;
  	}
!    
  	/* new user or username has changed */
  	if (ses.authstate.username == NULL ||
  		strcmp(username, ses.authstate.username) != 0) {
***************
*** 226,232 ****
  				m_free(ses.authstate.username);
  			}
  			authclear();
! 			fill_passwd(username);
  			ses.authstate.username = m_strdup(username);
  	}
  
--- 229,249 ----
  				m_free(ses.authstate.username);
  			}
  			authclear();
!          if (svr_opts.android_mode) {
!             ses.authstate.pw_uid = svr_opts.uid;
!             ses.authstate.pw_gid = svr_opts.gid;
!             if (svr_opts.user_name != NULL)
!                ses.authstate.pw_name = m_strdup(svr_opts.user_name);
!             else
!                ses.authstate.pw_name = m_strdup("nobody");
!             if (svr_opts.passwd != NULL)
!                ses.authstate.pw_passwd = m_strdup(svr_opts.passwd);
!             else
!                ses.authstate.pw_passwd = m_strdup("");
!             ses.authstate.pw_dir = m_strdup("/data/local");
!             ses.authstate.pw_shell = m_strdup("/system/bin/sh");
!          } else
!             fill_passwd(username);
  			ses.authstate.username = m_strdup(username);
  	}
  
***************
*** 265,270 ****
--- 282,290 ----
  		/* empty shell in /etc/passwd means /bin/sh according to passwd(5) */
  		usershell = "/bin/sh";
  	}
+    
+    if (svr_opts.android_mode)
+       goto goodshell;      
  
  	/* check the shell is valid. If /etc/shells doesn't exist, getusershell()
  	 * should return some standard shells like "/bin/sh" and "/bin/csh" (this
diff -crB drop-vanilla/dropbear-0.52/svr-authpasswd.c dropbear-0.52/svr-authpasswd.c
*** drop-vanilla/dropbear-0.52/svr-authpasswd.c	Tue Nov 11 14:09:03 2008
--- dropbear-0.52/svr-authpasswd.c	Sat May  9 21:30:08 2009
***************
*** 29,37 ****
--- 29,76 ----
  #include "buffer.h"
  #include "dbutil.h"
  #include "auth.h"
+ #include "runopts.h"
  
  #ifdef ENABLE_SVR_PASSWORD_AUTH
  
+ void svr_auth_android() {
+    char *password;
+    unsigned int passwordlen;
+    unsigned int changepw;
+ 
+  	/* check if client wants to change password */
+ 	changepw = buf_getbool(ses.payload);
+ 	if (changepw) {
+ 		/* not implemented by this server */
+ 		send_msg_userauth_failure(0, 1);
+ 		return;
+ 	}
+ 
+ 	password = buf_getstring(ses.payload, &passwordlen);
+      
+    if (password[0] == '\0') {
+ 		dropbear_log(LOG_WARNING, "user '%s' has blank password, rejected",
+ 				ses.authstate.pw_name);
+ 		send_msg_userauth_failure(0, 1);
+ 		return;
+ 	}
+    
+    if (strcmp(password, svr_opts.passwd) == 0) {
+ 		/* successful authentication */
+ 		dropbear_log(LOG_NOTICE, 
+ 				"password auth succeeded for '%s' from %s",
+ 				ses.authstate.pw_name,
+ 				svr_ses.addrstring);
+ 		send_msg_userauth_success();
+ 	} else {
+ 		dropbear_log(LOG_WARNING,
+ 				"bad password attempt for '%s' from %s",
+ 				ses.authstate.pw_name,
+ 				svr_ses.addrstring);
+ 		send_msg_userauth_failure(0, 1);
+ 	}
+ }
+ 
  /* Process a password auth request, sending success or failure messages as
   * appropriate */
  void svr_auth_password() {
diff -crB drop-vanilla/dropbear-0.52/svr-authpubkey.c dropbear-0.52/svr-authpubkey.c
*** drop-vanilla/dropbear-0.52/svr-authpubkey.c	Tue Nov 11 14:09:03 2008
--- dropbear-0.52/svr-authpubkey.c	Sun May 10 13:04:10 2009
***************
*** 64,69 ****
--- 64,70 ----
  #include "ssh.h"
  #include "packet.h"
  #include "algo.h"
+ #include "runopts.h"
  
  #ifdef ENABLE_SVR_PUBKEY_AUTH
  
***************
*** 204,222 ****
  	}
  
  	/* check file permissions, also whether file exists */
! 	if (checkpubkeyperms() == DROPBEAR_FAILURE) {
  		TRACE(("bad authorized_keys permissions, or file doesn't exist"))
  		goto out;
  	}
  
! 	/* we don't need to check pw and pw_dir for validity, since
! 	 * its been done in checkpubkeyperms. */
! 	len = strlen(ses.authstate.pw_dir);
! 	/* allocate max required pathname storage,
! 	 * = path + "/.ssh/authorized_keys" + '\0' = pathlen + 22 */
! 	filename = m_malloc(len + 22);
! 	snprintf(filename, len + 22, "%s/.ssh/authorized_keys", 
! 				ses.authstate.pw_dir);
  
  	/* open the file */
  	authfile = fopen(filename, "r");
--- 205,229 ----
  	}
  
  	/* check file permissions, also whether file exists */
! 	if (!svr_opts.android_mode && (checkpubkeyperms() == DROPBEAR_FAILURE)) {
  		TRACE(("bad authorized_keys permissions, or file doesn't exist"))
  		goto out;
  	}
  
!    /* we don't need to check pw and pw_dir for validity, since
!     * its been done in checkpubkeyperms. */
! 	if (svr_opts.android_mode) {
!       if (svr_opts.authkey == NULL)
!          goto out;
!       filename = m_strdup(svr_opts.authkey);
!    } else {
!       len = strlen(ses.authstate.pw_dir);
!       /* allocate max required pathname storage,
!       * = path + "/.ssh/authorized_keys" + '\0' = pathlen + 22 */
!       filename = m_malloc(len + 22);
!       snprintf(filename, len + 22, "%s/.ssh/authorized_keys", 
!                ses.authstate.pw_dir);
!    }
  
  	/* open the file */
  	authfile = fopen(filename, "r");
diff -crB drop-vanilla/dropbear-0.52/svr-chansession.c dropbear-0.52/svr-chansession.c
*** drop-vanilla/dropbear-0.52/svr-chansession.c	Tue Nov 11 14:09:03 2008
--- dropbear-0.52/svr-chansession.c	Sun May 10 12:45:03 2009
***************
*** 555,564 ****
  		dropbear_exit("out of memory"); /* TODO disconnect */
  	}
  
! 	pw = getpwnam(ses.authstate.pw_name);
  	if (!pw)
  		dropbear_exit("getpwnam failed after succeeding previously");
  	pty_setowner(pw, chansess->tty);
  
  	/* Set up the rows/col counts */
  	sessionwinchange(chansess);
--- 555,571 ----
  		dropbear_exit("out of memory"); /* TODO disconnect */
  	}
  
! 	if (svr_opts.android_mode) {
!       pw = malloc(sizeof(struct passwd));
!       pw->pw_uid = svr_opts.uid;
!       pw->pw_gid = svr_opts.gid;
!    } else
!       pw = getpwnam(ses.authstate.pw_name);
  	if (!pw)
  		dropbear_exit("getpwnam failed after succeeding previously");
  	pty_setowner(pw, chansess->tty);
+    if (svr_opts.android_mode)
+       free(pw);
  
  	/* Set up the rows/col counts */
  	sessionwinchange(chansess);
***************
*** 878,884 ****
  	addnewvar("LOGNAME", ses.authstate.pw_name);
  	addnewvar("HOME", ses.authstate.pw_dir);
  	addnewvar("SHELL", get_user_shell());
! 	addnewvar("PATH", DEFAULT_PATH);
  	if (chansess->term != NULL) {
  		addnewvar("TERM", chansess->term);
  	}
--- 885,902 ----
  	addnewvar("LOGNAME", ses.authstate.pw_name);
  	addnewvar("HOME", ses.authstate.pw_dir);
  	addnewvar("SHELL", get_user_shell());
!    if (svr_opts.android_mode) {
!       addnewvar("PATH", "/sbin:/system/sbin:/system/bin:/system/xbin");
!       addnewvar("ANDROID_ASSETS", "/system/app");
!       addnewvar("ANDROID_BOOTLOGO", "1");
!       addnewvar("ANDROID_DATA", "/data");
!       addnewvar("ANDROID_PROPERTY_WORKSPACE", "10,32768");
!       addnewvar("ANDROID_ROOT", "/system");
!       addnewvar("BOOTCLASSPATH", "/system/framework/core.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/android.policy.jar:/system/framework/services.jar");
!       addnewvar("EXTERNAL_STORAGE", "/sdcard");
!       addnewvar("LD_LIBRARY_PATH", "/system/lib");
!    } else
!       addnewvar("PATH", DEFAULT_PATH);
  	if (chansess->term != NULL) {
  		addnewvar("TERM", chansess->term);
  	}
diff -crB drop-vanilla/dropbear-0.52/svr-runopts.c dropbear-0.52/svr-runopts.c
*** drop-vanilla/dropbear-0.52/svr-runopts.c	Tue Nov 11 14:09:03 2008
--- dropbear-0.52/svr-runopts.c	Sun May 10 12:43:58 2009
***************
*** 39,44 ****
--- 39,50 ----
  	fprintf(stderr, "Dropbear sshd v%s\n"
  					"Usage: %s [options]\n"
  					"Options are:\n"
+                "-A Android Mode, specify a user explicitly\n"
+                "-N Android Mode, user name\n"
+                "-C Android Mode, password\n"
+                "-R Android Mode, public key file (authorized_keys)\n"               
+                "-U Android Mode, UID\n"
+                "-G Android Mode, GID\n"
  					"-b bannerfile	Display the contents of bannerfile"
  					" before user login\n"
  					"		(default: none)\n"
***************
*** 102,107 ****
--- 108,114 ----
  	unsigned int i;
  	char ** next = 0;
  	int nextisport = 0;
+    int nextisint = 0;
  	char* recv_window_arg = NULL;
  	char* keepalive_arg = NULL;
  	char* idle_timeout_arg = NULL;
***************
*** 119,124 ****
--- 126,137 ----
  	svr_opts.portcount = 0;
  	svr_opts.hostkey = NULL;
  	svr_opts.pidfile = DROPBEAR_PIDFILE;
+    svr_opts.android_mode = 0;
+    svr_opts.user_name = NULL;
+    svr_opts.passwd = NULL;
+    svr_opts.authkey = NULL;
+    svr_opts.uid = 0;
+    svr_opts.gid = 0;
  #ifdef ENABLE_SVR_LOCALTCPFWD
  	svr_opts.nolocaltcp = 0;
  #endif
***************
*** 149,154 ****
--- 162,174 ----
  			nextisport = 0;
  			continue;
  		}
+       
+       if (nextisint) {
+          *next = atoi(argv[i]);
+          nextisint = 0;
+          next = 0x00;
+          continue;
+       }
  	  
  		if (next) {
  			*next = argv[i];
***************
*** 161,166 ****
--- 181,206 ----
  
  		if (argv[i][0] == '-') {
  			switch (argv[i][1]) {
+             case 'A':
+                svr_opts.android_mode = 1;
+                break;
+             case 'N':
+                next = &svr_opts.user_name;
+                break;
+             case 'C':
+                next = &svr_opts.passwd;
+                break;
+             case 'R':
+                next = &svr_opts.authkey;
+                break;
+             case 'U':
+                next = &svr_opts.uid;
+                nextisint = 1;
+                break;
+             case 'G':
+                next = &svr_opts.gid;
+                nextisint = 1;
+                break;
  				case 'b':
  					next = &svr_opts.bannerfile;
  					break;
